'use strict';

var react = require('react');

function loadUser(uid, cb) { setTimeout(cb, 100, null, "User" + uid); }
function loadFile(filename, cb) { setTimeout(cb, 100, null, 'Filedata' + filename); }
function markdown(filedata) { return 'html' + filedata; }
function prepareDirectory(outDirname, cb) { setTimeout(cb, 200, null, 'dircreated-' + outDirname); }
function writeOutput(html, user, cb) {  setTimeout(cb, 300, null, html + '_bytesWritten'); }
function loadEmailTemplate(cb) { setTimeout(cb, 50, null, 'emailmd'); }
function customizeEmail(user, emailHtml, cb) { return 'cust-' + user + emailHtml; }
function deliverEmail(custEmailHtml, cb) { setTimeout(cb, 100, null, 'delivered-' + custEmailHtml); }

function useHtml(err, html, user, bytesWritten) {
  if (err) {
    console.log('***Error: %s', err);
    return;
  }
  console.log('final result: %s, user: %s, written:%s', html, user, bytesWritten);     
}



var fn = react(function (r, filename, uid, outDirname, cb) {
  var err, user, html, bytesWritten;
  r.sync(loadUser).in(uid).out(err, user)
    .cb(err, html, user, bytesWritten);
});


/*
var r = react();
    r.ast.inputNames = ['filename', 'uid', 'outDirname', 'cb'];
    r.ast.taskDefs = [
      { f:loadUser,          a:['uid'],               cb:['user'] },
      { f:loadFile,          a:['filename'],          cb:['filedata'] },
      { f:markdown,          a:['filedata'],          ret:['html'] },
      { f:prepareDirectory,  a:['outDirname'],        cb:['dircreated'] },
      { f:writeOutput,       a:['html', 'user'],      cb:['bytesWritten'],   after:['prepareDirectory'] },
      { f:loadEmailTemplate, a:[],                    cb:['emailmd'] },
      { f:markdown,          a:['emailmd'],           ret:['emailHtml'] },
      { f:customizeEmail,    a:['user', 'emailHtml'], ret:['custEmailHtml'] },
      { f:deliverEmail,      a:['custEmailHtml'],     cb:['deliveredEmail'], after:['writeOutput'] }
    ];
    r.ast.finalOutputNames = ['html', 'user', 'bytesWritten'];
*/

var fn = react(function (r, filename, uid, outDirname, cb,
                         filedata, outDirName, dircreated, emailmd, emailHtml,
                         custEmailHtml, deliveredEmail,
                         err, user, html, bytesWritten) {

  r.async(loadUser, [uid], [err, user])
    .async(loadFile, [filename], [filedata])
    .sync(markdown, [filedata], filedata)
    .async(prepareDirectory, [outDirName], [dircreated])
    .async(writeOutput, [html, user], [err, bytesWritten], { after: prepareDirectory })
    .async(loadEmailTemplate, [], [emailmd])
    .sync(markdown, [emailmd], emailHtml)
    .sync(customizeEmail, [user, emailHtml], custEmailHtml)
    .sync(deliverEmail, [custEmailHtml], [deliveredEmail], { after: writeOutput })
    .cb(err, html, user, bytesWritten);
});
